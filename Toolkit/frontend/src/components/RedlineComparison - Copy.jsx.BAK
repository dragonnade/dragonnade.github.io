import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';

const stripNodesWithClass = (html, classesToStrip = ['LegAnnotations']) => {
  const div = document.createElement('div');
  div.innerHTML = html;
  
  classesToStrip.forEach(className => {
    const elements = div.getElementsByClassName(className);
    while(elements.length > 0) {
      elements[0].parentNode.removeChild(elements[0]);
    }
  });
  
  return div.innerHTML;
};

const extractTextContent = (html) => {
  const div = document.createElement('div');
  div.innerHTML = html;

  // Get text from relevant elements with classes like LegText, LegP1ParaText, etc
  const textElements = div.querySelectorAll('.LegText, .LegP1ParaText, .LegP2ParaText, .LegP3Text, .LegListTextStandard');
  
  return Array.from(textElements).map(el => el.textContent.trim()).join('\n');
};

const RedlineComparison = ({ 
  baseArticle,
  comparisonArticles,
  onClose 
}) => {
  const [comparisons, setComparisons] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const compareArticles = async () => {
      setLoading(true);
      try {
        // Fetch base article HTML
        const baseResponse = await fetch(`${baseArticle.url}/data.html`);
        if (!baseResponse.ok) throw new Error('Failed to fetch base article');
        const baseHtml = await baseResponse.text();
        const cleanBaseHtml = stripNodesWithClass(baseHtml);
        const baseText = extractTextContent(cleanBaseHtml);

        // Fetch and compare each selected article
        const results = await Promise.all(
          comparisonArticles.map(async (article) => {
            const response = await fetch(`${article.url}/data.html`);
            if (!response.ok) throw new Error(`Failed to fetch article: ${article.article_number}`);
            const html = await response.text();
            const cleanHtml = stripNodesWithClass(html);
            const comparisonText = extractTextContent(cleanHtml);

            // Get redline comparison from backend
            const compareResponse = await fetch('http://localhost:3000/api/compare-articles', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                baseText,
                comparisonText
              }),
            });

            if (!compareResponse.ok) throw new Error('Failed to compare texts');
            const { html: redlineHtml } = await compareResponse.json();

            return {
              article,
              redlineHtml
            };
          })
        );

        setComparisons(results);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    compareArticles();
  }, [baseArticle, comparisonArticles]);

  if (loading) {
    return (
      <Card className="w-full">
        <CardContent className="p-6">
          <div className="text-center">Loading comparison...</div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="w-full">
        <CardContent className="p-6">
          <div className="text-red-500">Error: {error}</div>
          <Button onClick={onClose} className="mt-4">Close</Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full">
      <CardContent className="p-6">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Article Comparison</h3>
          <Button onClick={onClose} variant="outline">Close</Button>
        </div>
        
        <ScrollArea className="h-[600px]">
          <div className="space-y-6">
            {comparisons.map(({ article, redlineHtml }, index) => (
              <div key={article.similarity_id} className="border rounded-lg p-4">
                <h4 className="font-medium mb-2">
                  Comparing with: {article.order_name} - Article {article.article_number}
                </h4>
                <div 
                  className="comparison-content LegSnippet" 
                  dangerouslySetInnerHTML={{ 
                    __html: redlineHtml 
                  }} 
                />
              </div>
            ))}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};

export default RedlineComparison;